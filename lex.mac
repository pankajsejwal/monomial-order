
load("ratpow.lisp")$

load("simplifying");

ordersort(lis,vars,oper):=block([liss:lis,varlist:vars,temp], /*Does lexicographical sort */
for i:1 thru length(varlist) do (
    for j:1 thru i do (
        liss:sort(liss,lambda([x,y],apply("and",map(oper,makelist(part(x,2)[k],k,1,i)
                            ,makelist(part(y,2)[k],k,1,i)))))
    )),liss)$

create_mypoly(lis,var):=block([temp:[],intem:[],coefl:map(last,lis),firlist:map(first,lis)], /* Convert to polynomial from intermediate poly representation */
for item in coefl do (  
    temp:(append (temp, [map(lambda([s,d],if(s#0) then apply("^",[d,s]) else 1),item,var)]))),
    temp:map(lambda([d],apply("*",d)),temp), 
    simpfunmake(verbify("+"),reverse(map(lambda([a,b],a*b),temp,firlist)))
)$

/* Collect the integer part of monomials list of polynomial */
:lisp(defun $poly2coefarr(p) 
   (if (listp p) (progn 
    (let* ((temp nil)(r (ratf p))           
      (den (cddr r))          
      (pairlist (cdadr r))) 
        (setf temp (cons temp (last (flatten pairlist)))) 
        (setf temp (mapcar #'(lambda(x)(div x den)) temp)) 
         )) p))

/* Flatten a lisp list */
:lisp(defun flatten (structure)
  (cond ((null structure) nil)
        ((atom structure) (list structure))
        (t (mapcan #'flatten structure))))

/* Convert lisp array to list */
:lisp(defun $poly2coeflist(p) 
    (let* ((temp ($poly2coefarr p))) 
        (if (listp temp) (progn (setf temp (last temp)) 
   (cond ((eql (length temp) 1) temp)
         ((> (length temp) 1) 
                    (div (nth (- (length temp) 2) temp)(nth (- (length temp) 1) temp))))) temp)
        (if (atom temp) temp (cons '(mlist) temp))))

/* Does degreelexicographical sort */
totallexordersort(lis,var,oper):=block([liss:lis,varlist:vars,temp,temp2:[]], 
temp:map(lambda([w],append(w,[apply("+",last(w))])),lis),
temp:sort(temp,lambda([x,y],is(last(x)>=last(y)))), 
for it in reverse(unique(map(last,temp))) do
     (temp2:append(temp2,[takewhile(temp,lambda([x],last(x)=it))])), 
temp2:map(lambda([a],if(length(a)>1) then ordersort(map(lambda([b],[first(b),second(b)]),a),var,oper)
        else a),temp2),
temp:[],
for item in temp2 do temp:append(reverse(item),temp), 
temp:map(lambda([x],[first(x),second(x)]),reverse(temp)))$

takewhile(lst, pr):= block([c: []],
  reverse(catch(for idx thru length(lst) do block([el:part(lst, idx)],
        if not pr(el) and not emptyp(c) then throw(c)
        else if pr(el) then push(el,c)),
      c)))$
   
/* graded lexicographic sort */   
glexordersort(lis,var,oper):=block([liss:lis,varlist:vars,temp,temp2:[]], /* Graded reverse lexicographical sort */
temp:map(lambda([w],append(w,[apply("+",last(w))])),lis),
temp:sort(temp,lambda([x,y],is(last(x)>=last(y)))), 
for it in reverse(unique(map(last,temp))) do
     (temp2:append(temp2,[takewhile(temp,lambda([x],last(x)=it))])), 
temp2:map(lambda([a],if(length(a)>1) then 
            ordersort(map(lambda([b],[first(b),second(b)]),a),var,">=")
        else a),temp2), 
temp:[], 
for item in temp2 do temp:append(reverse(item),temp), 
temp:map(lambda([x],[first(x),second(x)]),reverse(temp)))$

/* Graded reverse lexicographical sort */
grevlexordersort(lis,var,oper):=block([liss:lis,varlist:vars,temp,temp2:[]], 
temp:map(lambda([w],append(w,[apply("+",last(w))])),lis),
temp:sort(temp,lambda([x,y],is(last(x)>=last(y)))), 
for it in reverse(unique(map(last,temp))) do
     (temp2:append(temp2,[takewhile(temp,lambda([x],last(x)=it))])), 
temp2:map(lambda([a],if(length(a)>1) then 
            map(lambda([s],[first(s),reverse(second(s))]),ordersort(map(lambda([b],[first(b),reverse(second(b))]),a),var,">="))
        else a),temp2),
temp:[], 
for item in temp2 do temp:append(item,temp), 
temp:map(lambda([x],[first(x),second(x)]),reverse(temp)))$

/*Convert a poly to intermediate representation as 10*x^2*y -> [10,[2,1,0]]*/
lex(poly,lis,msort):=block([final:[],temp:[],coeflist,len:length(args(poly))],
if(polynomialp(poly,listofvars(poly)) and listp(lis)) then (
        for i:1 thru length(lis) do (
temp:map(lambda([zzz],ratp_coeffs(zzz,part(lis,i))[1][1]),args(poly)), 
         final:append(final,[flatten(temp)])),
        final:args(transpose(apply(matrix,final))),
        coeflist:flatten(map(poly2coeflist,args(poly))), temp:[],
        for i:1 thru length(coeflist) do temp:append([[part(coeflist,i),part(final,i)]],temp), 
   apply(msort,[temp,lis,">="])))$

/*-----------Methods for user interface-------------*/

/* Graded lexicographic sort */
glexOrdering(poly,var):=block([temp],
temp:lex(expand(poly),var,glexordersort),create_mypoly(temp,var))$

/* Graded reverse lex ordering */
grevlexOrdering(poly,var):=block([temp],temp:lex(expand(poly),var,grevlexordersort),create_mypoly(temp,var))$

/*lex ordering */
lexOrdering(poly,var):=block([temp],temp:lex(expand(poly),var,ordersort),create_mypoly(temp,var))$

/* Inverse lex ordering */
invlexOrdering(poly,var):=block([temp],temp:lex(expand(poly),reverse(var),ordersort),create_mypoly(temp,reverse(var)))$

/*Negative Lex ordering */
neglexOrdering(poly,var):=block([temp],temp:lex(expand(poly),var,ordersort),create_mypoly(reverse(temp),var))$

/*reverse lex ordering*/
revlexOrdering(poly,var):=block([temp],temp:lex(expand(poly),reverse(var),ordersort),(create_mypoly(reverse(temp),reverse(var))))$

/* Degree lex ordering */
deglexOrdering(poly,var):=block([temp],temp:lex(expand(poly),var,totallexordersort),create_mypoly(temp,var))$

